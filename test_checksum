#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pcap.h>
#include <netinet/ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
//#include <regex>
#define BUFSIZE 1500

void callback(pcap_pkthdr *pkt_header, const u_char *pkt_data);
void print_mac(uint8_t *mac, uint8_t *box);
void print_host(u_char *data, int leng);
#pragma pack(push,1)
struct pseudo
{
    uint32_t sd;
    uint32_t dd;
    uint16_t tcppro; //?
    uint16_t reserve; //?
    uint16_t offset;
};
struct tcpheader
{
    u_int32_t seq;
    u_int32_t ack_seq;
    u_int16_t dataoff;      /* data offset */
    u_int16_t flags;
    u_int16_t sport;      /* source port */
    u_int16_t dport;      /* destination port */
    u_int16_t window;      /* window */
    u_int16_t checksum;      /* checksum */
    u_int16_t urg_p;      /* urgent pointer */
};

#pragma pack(pop)
int main(int argc, char *argv[])
{

    if(argc!=3)
    {
        printf(" parameter error\n");
        printf(" <dev> <port>\n");
    }
    char *dev = argv[1];
    printf("%s\n", dev);
    char errbuf[PCAP_ERRBUF_SIZE];
    struct bpf_program fp;
    pcap_t *hd;
    bpf_u_int32 mask;
    bpf_u_int32 net;

    if(pcap_lookupnet(dev, &net, &mask, errbuf)<0)
    {
        printf("%s\n", errbuf);
        exit(1);
    }

    hd = pcap_open_live(dev, BUFSIZE, 1, 1, errbuf);
    if(hd==NULL)
    {
        printf(" Couldn't open device %s : %s\n", dev, errbuf);
        exit(1);
    }

    if(pcap_compile(hd, &fp, argv[2] ,0, net) < 0)
    {
        printf("Compile ERROR\n");
        exit(1);
    }

    if(pcap_setfilter(hd, &fp)==-1)
    {
        printf("Setfilter ERROR\n");
        exit(1);
    }
    struct pcap_pkthdr *pkt_header;
    const u_char *pkt_data;


    while(int pk=pcap_next_ex(hd, &pkt_header, &pkt_data)>=0)
    {
        if(pk==1)
            callback(pkt_header, pkt_data);
        else if(pk==0)
        {
            printf("Time out \n");
        }
        else if(pk==-1)
        {
            printf("ERROR");
        }
        else if(pk==-2)
        {
            printf("End OF File\n");
        }
        else
            break;
    }
    pcap_close(hd);
}

void callback(struct pcap_pkthdr *pkt_header, const u_char *pkt_data)
{
    int length=pkt_header->caplen;
    struct ether_header *ep;            //ether_pointer
    ep=(struct ether_header *)pkt_data;
    uint8_t dst_mac[6];
    uint8_t src_mac[6];
    printf("#################################################\n");
    printf("*************** ETHER INFORMATION *************** \n");
    printf("Dst MAC : ");
    print_mac(ep->ether_dhost,dst_mac);
    printf("Src MAC : ");
    print_mac(ep->ether_shost,src_mac);

    if(ep->ether_type==htons(ETHERTYPE_IP))
    {
        printf("**************** IP INFORMATION ***************** \n");
        pkt_data += sizeof(struct ether_header);
        struct iphdr *ipp;
        ipp= (struct iphdr *)pkt_data;

        printf("Version : %d\n",ipp->version);
        char src_ip[32];
        inet_ntop(AF_INET,&(ipp->saddr),src_ip,32);
        printf("Src IP : ");
        printf("%s\n",src_ip);

        char dst_ip[32];
        inet_ntop(AF_INET,&(ipp->daddr),dst_ip,32);
        printf("Dst IP : ");
        printf("%s\n",dst_ip);


        if(ipp->protocol==0x06)
        {
            pkt_data += sizeof(struct iphdr);

            int total = ntohs(ipp->tot_len);
            int iphdl = (ipp->ihl)*4;
            printf("total : %d\n",total);
            printf("header len : %d\n",iphdl);

            int tcp_tcpdata = total - iphdl;
            int cal_tcp;
            if(tcp_tcpdata % 2 == 1)
                cal_tcp=tcp_tcpdata/2 + 1;
            else
                cal_tcp=tcp_tcpdata/2;

            printf("tcp_tcpdata(total - iphdl) = %d\n", tcp_tcpdata);
            printf("cal_tcp = %d\n", cal_tcp);
            struct pseudo pd;

            uint16_t pdp[7];
            pd.sd=ntohl(ipp->saddr);
            pd.dd=ntohl(ipp->daddr);
            pd.tcppro=ipp->protocol;
            pd.reserve=0;
            pd.offset=tcp_tcpdata; //fix here

            memcpy(pdp,&pd,sizeof(pd));
            int sum1=0;
            for(int i=0; i<7; i++)
            {
                sum1 += pdp[i];
                if(sum1>=65536)
                {
                    sum1=sum1-65536+1;
                }
            }

            uint16_t tdata[cal_tcp]{0};
            int ch_count2{0};
            printf("test\n");
            int sumsum{0};

            uint16_t *p = (uint16_t*)pkt_data; //2byte로 받기 위해서 포인터로 집어줌
            int i=0;
            while(i<cal_tcp)
            {
                if((i+1==cal_tcp) && i % 2 == 1)
                    tdata[cal_tcp-1]=(uint8_t)*p;  //2바이트씩 묶엇을때 홀수일경우 해결하기
                else
                    tdata[i] = ntohs(*(p++));

                sumsum += tdata[i++];

                if(sumsum>=65536)
                {
                    sumsum=sumsum-65536+1;
                }
            }
            /* temp
            int j=0;
            while(j<tcp_tcpdata)
            {
            printf("%02x ", *(pkt_data++));
            j++;
            if(++ch_count2 % 16 == 0)
                printf("\n");
            }
            */

            printf("\n");

            struct tcphdr *tp;
            tp = (struct tcphdr*)pkt_data;
            uint16_t ch =ntohs(tp->check);
            pkt_data += sizeof(struct tcphdr);


            printf("pseudo = 0x%04x\n", sum1);
            printf("sumsum = 0x%04x\n",sumsum);
            printf("check = 0x%04x\n",ch);
            int hi =sumsum-ch;
            int bye =0;
            bye = sum1+hi;
            if(bye>=65536)
                bye=bye-65536+1;

            printf("fin check = 0x%04x\n",bye); //not연산 해결하기
            //111개차이가남 check

            printf("******************* HOST PRINT*******************\n");
            print_host((u_char*)tp, length);

            printf("\n");
            printf("****************** TCP PACKET ******************\n");
/*
            int ch_count{0};
            while(length--)
            {
                printf("%02x ",*(pkt_data++));
                if(++ch_count % 16 == 0)
                    printf("\n");
            }
            printf("\n");
        }
        else
            printf("NO MATCH TCP PACKET\n");
    }
    else
        printf("NO MATCH IP PACKET\n");
*/
        }
    }
}


void print_mac(uint8_t *mac, uint8_t *box)
{
    memcpy(box,mac,6);
    for(int i=0; i<6; i++)
        printf("%02x ",box[i]);

    printf("\n");
}


void print_host(u_char *data, int leng)
{
    for(;leng>0;leng--)
    {
        uint32_t *host_start = (uint32_t *)data;
        if(*host_start == ntohl(0x486f7374))
        {
            for(;leng>0;leng--)
            {
                uint16_t *host_end = (uint16_t *)data;
                printf("%c",*data);
                data++;
                if(*host_end == ntohs(0x0d0a))
                    break;
            }
        }
        else
            data++;
    }
}
